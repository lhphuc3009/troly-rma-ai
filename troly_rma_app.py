import streamlit as st
name, authentication_status, username = authenticator.login(location="main", form_name="ƒêƒÉng nh·∫≠p")
if authentication_status:
    import os
    from dotenv import load_dotenv
    load_dotenv()

    import pandas as pd
    import os
    import unicodedata
    import re
    import io
    import json
    import requests
    import io
    from openai import OpenAI
    from rma_ai import query_openai
    import rma_query_templates
    from rma_utils import clean_text, find_col, normalize_for_match, match_block, ensure_time_columns, extract_time_filter_from_question, filter_df_by_time
    # ƒê·ªçc √°nh x·∫° t√™n c·ªôt t·ª´ file JSON
    def load_column_mapping(path="uploaded_files/column_mapping.json"):
        try:
            with open(path, "r", encoding="utf-8") as f:
                return json.load(f)
        except:
            return {}

    COLUMN_MAPPING = load_column_mapping()

    st.set_page_config(page_title="Tra c·ª©u RMA", layout="wide")
    st.title("üîé Tra c·ª©u d·ªØ li·ªáu b·∫£o h√†nh - s·ª≠a ch·ªØa")

    UPLOAD_FOLDER = "uploaded_files"
    os.makedirs(UPLOAD_FOLDER, exist_ok=True)
    DATA_CACHE_PATH = os.path.join(UPLOAD_FOLDER, "rma_cache_data.parquet")


    def bo_loc_da_nang(df):
        df_filtered = df.copy()

        with st.sidebar.expander("üß∞ B·ªô l·ªçc n√¢ng cao", expanded=True):
            # === H√ÄNG 1: NƒÉm v√† Th√°ng ===
            col1, col2 = st.columns(2)
            years = sorted(df["NƒÉm"].dropna().unique())
            months = sorted(df["Th√°ng"].dropna().unique())
            selected_years = col1.multiselect(
                "NƒÉm", years, placeholder="Ch·ªçn nƒÉm"
            )
            selected_months = col2.multiselect(
                "Th√°ng", months, placeholder="Ch·ªçn th√°ng"
            )

            # === H√ÄNG 2: Qu√Ω v√† Ng√†y ti·∫øp nh·∫≠n ===
            col3, col4 = st.columns(2)
            quarters = sorted(df["Qu√Ω"].dropna().unique())
            selected_quarters = col3.multiselect(
                "Qu√Ω", quarters, placeholder="Ch·ªçn qu√Ω"
            )
            date_range = col4.date_input(
                "Ng√†y ti·∫øp nh·∫≠n (T·ª´ ‚Äì ƒê·∫øn)", [], format="YYYY-MM-DD"
            )

        # √Åp d·ª•ng b·ªô l·ªçc
        if selected_years:
            df_filtered = df_filtered[df_filtered["NƒÉm"].isin(selected_years)]
        if selected_months:
            df_filtered = df_filtered[df_filtered["Th√°ng"].isin(selected_months)]
        if selected_quarters:
            df_filtered = df_filtered[df_filtered["Qu√Ω"].isin(selected_quarters)]
        if isinstance(date_range, list) and len(date_range) == 2:
            col_date = find_col(df.columns, "ng√†y ti·∫øp nh·∫≠n")
            if col_date:
                df_filtered = df_filtered[
                    (df_filtered[col_date] >= pd.to_datetime(date_range[0])) &
                    (df_filtered[col_date] <= pd.to_datetime(date_range[1]))
                ]

        return df_filtered, {
            "nƒÉm": selected_years,
            "th√°ng": selected_months,
            "qu√Ω": selected_quarters,
            "ng√†y": date_range
        }

    def show_table(title, df, highlight_cols=None, key=None):
        st.markdown(f"### {title}")
        if highlight_cols is not None and len(df) > 0:
            valid_cols = [col for col in highlight_cols if col in df.columns]
            def color_green(val):
                return "color: #16A34A; font-weight: bold" if isinstance(val, (int, float)) else ""
            if "T·ª∑ l·ªá s·ª≠a th√†nh c√¥ng (%)" in df.columns:
                styled = df.style.format(
                    {"T·ª∑ l·ªá s·ª≠a th√†nh c√¥ng (%)": "{:.2f}"}
                ).applymap(color_green, subset=valid_cols)
            elif valid_cols:
                styled = df.style.applymap(color_green, subset=valid_cols)
            else:
                styled = df.style
            st.dataframe(styled)
        else:
            st.dataframe(df)
        if len(df) > 0:
            buffer = io.BytesIO()
            df.to_excel(buffer, index=False, engine='openpyxl')
            st.download_button(
                label="‚¨áÔ∏è T·∫£i Excel b·∫£ng n√†y",
                data=buffer.getvalue(),
                file_name="ket_qua_truy_van.xlsx",
                mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                key=key
            )

    # --- T√¨m g·∫ßn ƒë√∫ng kh√°ch h√†ng: block t·ª´ li·ªÅn k·ªÅ ---
    def search_customers_by_keyword(df, keyword):
        customer_col = find_col(df.columns, "t√™n kh√°ch h√†ng")
        if customer_col is None or not keyword:
            return df, None
        matched_names = sorted({
            val for val in df[customer_col].unique()
            if match_block(val, keyword)
        })
        df2 = df[df[customer_col].apply(lambda x: match_block(x, keyword))]
        if matched_names:
            matched_str = ", ".join(matched_names)
            return df2, matched_str
        else:
            return df, None

    def get_top_products(df, question=None):
        product_col = find_col(df.columns, "s·∫£n ph·∫©m")
        if product_col is None:
            return pd.DataFrame()
        years, months, quarters = extract_time_filter_from_question(question or "")
        df2 = filter_df_by_time(df, years, months, quarters)
        if len(df2) > 30:
            top = df2[product_col].value_counts().head(10)
            return top.reset_index().rename(columns={"index": "S·∫£n ph·∫©m", product_col: "S·ªë l∆∞·ª£ng"})
        else:
            return df2[[product_col]].value_counts().reset_index(name="S·ªë l∆∞·ª£ng").head(10)

    def get_top_technicians(df, question=None):
        tech_col = find_col(df.columns, "k·ªπ thu·∫≠t vi√™n")
        if tech_col is None:
            return pd.DataFrame()
        df2 = df[df[tech_col].notna() & (df[tech_col] != "nan") & (df[tech_col].astype(str).str.strip() != "")]
        years, months, quarters = extract_time_filter_from_question(question or "")
        df2 = filter_df_by_time(df2, years, months, quarters)
        if len(df2) > 30:
            top = df2[tech_col].value_counts().head(10)
            return top.reset_index().rename(columns={"index": "K·ªπ thu·∫≠t vi√™n", tech_col: "S·ªë l∆∞·ª£ng"})
        else:
            return df2[[tech_col]].value_counts().reset_index(name="S·ªë l∆∞·ª£ng").head(10)

    def get_top_customers(df, question=None):
        customer_col = find_col(df.columns, "t√™n kh√°ch h√†ng")
        if customer_col is None:
            return pd.DataFrame()
        years, months, quarters = extract_time_filter_from_question(question or "")
        df2 = filter_df_by_time(df, years, months, quarters)
        if len(df2) > 30:
            top = df2[customer_col].value_counts().head(10)
            return top.reset_index().rename(columns={"index": "Kh√°ch h√†ng", customer_col: "S·ªë l∆∞·ª£ng"})
        else:
            return df2[[customer_col]].value_counts().reset_index(name="S·ªë l∆∞·ª£ng").head(10)

    def extract_short_customer_from_question(q):
        m = re.search(r"([a-zA-Z0-9√Ä-·ªπ\s\-\.]+)\sg·ª≠i", q, flags=re.IGNORECASE)
        if m:
            return m.group(1).strip()
        return None

    OPENAI_API_KEY = os.getenv("OPENAI_API_KEY") or st.sidebar.text_input("üîë Nh·∫≠p OpenAI API Key c·ªßa b·∫°n", type="password")
    st.sidebar.header("üóÇÔ∏è Qu·∫£n l√Ω d·ªØ li·ªáu")

    GOOGLE_SHEET_URL = "https://docs.google.com/spreadsheets/d/1fWFLZWyCAXn_B8jcZ0oY4KhJ8krbLPsH/export?format=csv"

    @st.cache_data
    def read_google_sheet(url):
        try:
            response = requests.get(url)
            if response.status_code == 200:
                df = pd.read_csv(io.StringIO(response.content.decode("utf-8")))
                df.columns = [col.strip() for col in df.columns]
                return df
            else:
                st.error("Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu t·ª´ Google Sheet.")
                return None
        except Exception as e:
            st.error(f"L·ªói khi ƒë·ªçc Google Sheet: {e}")
            return None

    # --- N·∫†P D·ªÆ LI·ªÜU CH√çNH ---
    data = read_google_sheet(GOOGLE_SHEET_URL)

    if data is not None:
        data["Ngu·ªìn file"] = "Google Sheet"
        data = ensure_time_columns(data)
        st.success(f"‚úÖ ƒê√£ t·∫£i {len(data)} d√≤ng d·ªØ li·ªáu t·ª´ Google Sheet.")
        data_filtered, filter_info = bo_loc_da_nang(data)
    else:
        st.warning("Kh√¥ng c√≥ d·ªØ li·ªáu n√†o ƒë∆∞·ª£c n·∫°p.")
        data_filtered = None

    # === G·ª¢I √ù KH√ÅCH H√ÄNG T·ª™ D·ªÆ LI·ªÜU ===
    st.subheader("üîç T√¨m ki·∫øm kh√°ch h√†ng")

    customer_col = find_col(data_filtered.columns, "t√™n kh√°ch h√†ng")
    if customer_col:
        all_customers = sorted(data_filtered[customer_col].dropna().unique())

        if "selected_customer" not in st.session_state:
            st.session_state.selected_customer = "--"

        selected_customer = st.selectbox(
            "Ch·ªçn ho·∫∑c nh·∫≠p t√™n kh√°ch h√†ng:",
            options=["--"] + all_customers,
            index=(["--"] + all_customers).index(st.session_state.selected_customer)
            if st.session_state.selected_customer in all_customers else 0
        )

        # L∆∞u v√†o session_state
        st.session_state.selected_customer = selected_customer

        if selected_customer != "--":
            df_filtered_customer = data_filtered[data_filtered[customer_col] == selected_customer]
            st.success(f"üîé ƒê√£ l·ªçc: {len(df_filtered_customer)} d√≤ng cho kh√°ch h√†ng '{selected_customer}'")
            st.dataframe(df_filtered_customer.head(30))

        # =========== B∆Ø·ªöC 3: H·ªéI ƒê√ÅP AI ===============
        st.markdown("## ü§ñ H·ªèi d·ªØ li·ªáu b·∫±ng AI")
        ai_model = st.sidebar.selectbox(
            "Ch·ªçn m√¥ h√¨nh AI",
            ["gpt-3.5-turbo", "gpt-4o"],
            index=0
        )
        if "chat_history" not in st.session_state:
            st.session_state.chat_history = []
        user_question = st.text_input(
            "Nh·∫≠p c√¢u h·ªèi v·ªÅ d·ªØ li·ªáu b·∫£o h√†nh/s·ª≠a ch·ªØa (b·∫±ng ti·∫øng Vi·ªát)...",
            key="rma_ai_question"
        )
        send_btn = st.button("üí¨ G·ª≠i c√¢u h·ªèi", key="rma_ai_send_btn")

        if send_btn and user_question:
            q = user_question.lower()
            customer_short = extract_short_customer_from_question(q)
            summary = None
            matched_names = None

            if (
                ("t·ªïng" in q or "tong" in q or "bao nhi√™u" in q)
                and ("s·∫£n ph·∫©m" in q or "san pham" in q)
                and not customer_short
            ):
                product_col = find_col(data_filtered.columns, "s·∫£n ph·∫©m")
                years, months, quarters = extract_time_filter_from_question(user_question)
                df2 = filter_df_by_time(data_filtered, years, months, quarters)
                total = df2[product_col].notna().sum()
                year_str = f" trong nƒÉm {years[0]}" if years else ""
                st.success(f"Trong{year_str}, t·ªïng c·ªông c√≥ {total:,} s·∫£n ph·∫©m ƒë∆∞·ª£c b·∫£o h√†nh.")
                summary = df2[product_col].value_counts().reset_index().rename(
                    columns={"index": "S·∫£n ph·∫©m", product_col: "S·ªë l∆∞·ª£ng"}
                ).head(10)
                show_table(
                    "B·∫£ng t√≥m t·∫Øt top s·∫£n ph·∫©m",
                    summary,
                    highlight_cols=["S·ªë l∆∞·ª£ng"],
                    key="download_button_latest"
                )
                st.stop()
            if (
                ("t·ªïng" in q or "tong" in q or "bao nhi√™u" in q)
                and ("s·∫£n ph·∫©m" in q or "san pham" in q)
                and customer_short
            ):
                df_customer, matched_names = search_customers_by_keyword(data_filtered, customer_short)
                product_col = find_col(df_customer.columns, "s·∫£n ph·∫©m")
                years, months, quarters = extract_time_filter_from_question(user_question)
                df2 = filter_df_by_time(df_customer, years, months, quarters)
                total = df2[product_col].notna().sum()
                year_str = f" trong nƒÉm {years[0]}" if years else ""
                matched_note = f" (d√≤ g·∫ßn ƒë√∫ng: {matched_names})" if matched_names else ""
                st.success(
                    f"Trong{year_str}, C√¥ng ty {customer_short.title()}{matched_note} ƒë√£ g·ª≠i t·ªïng c·ªông {total:,} s·∫£n ph·∫©m."
                )
                summary = df2[product_col].value_counts().reset_index().rename(
                    columns={"index": "S·∫£n ph·∫©m", product_col: "S·ªë l∆∞·ª£ng"}
                ).head(10)
                show_table(
                    "B·∫£ng t√≥m t·∫Øt top s·∫£n ph·∫©m",
                    summary,
                    highlight_cols=["S·ªë l∆∞·ª£ng"],
                    key="download_button_latest"
                )
                st.stop()
            if customer_short:
                df_customer, matched_names = search_customers_by_keyword(data_filtered, customer_short)
                if "s·∫£n ph·∫©m" in q or "model" in q:
                    summary = get_top_products(df_customer, user_question)
                elif "l·ªói" in q:
                    summary = pd.DataFrame()
                else:
                    summary = get_top_products(df_customer, user_question)
            elif "kh√°ch h√†ng" in q:
                summary = get_top_customers(data_filtered, user_question)
            elif "k·ªπ thu·∫≠t vi√™n" in q or "ktv" in q:
                summary = get_top_technicians(data_filtered, user_question)
            elif "s·∫£n ph·∫©m" in q or "model" in q:
                summary = get_top_products(data_filtered, user_question)
            else:
                summary = data_filtered.head(10)
            if summary is not None and not summary.empty:
                summary = summary.reset_index(drop=True)
                if "S·∫£n ph·∫©m" in summary.columns and "S·ªë l∆∞·ª£ng" in summary.columns:
                    summary = summary[["S·∫£n ph·∫©m", "S·ªë l∆∞·ª£ng"]].head(10)
                elif "Model" in summary.columns and "S·ªë l∆∞·ª£ng" in summary.columns:
                    summary = summary[["Model", "S·ªë l∆∞·ª£ng"]].head(10)
                else:
                    summary = summary.iloc[:, :2].head(10)
                summary = summary.fillna("").astype(str)
                for col in summary.columns:
                    summary[col] = summary[col].apply(lambda x: x[:40])
                csv_data = summary.to_csv(index=False)
                if len(csv_data) > 1500:
                    st.error("‚ùó K·∫øt qu·∫£ qu√° l·ªõn (token), vui l√≤ng l·ªçc th√™m th·ªùi gian ho·∫∑c h·ªèi c·ª• th·ªÉ h∆°n.")
                    st.stop()
            else:
                st.error("‚ùó Kh√¥ng t√¨m th·∫•y kh√°ch h√†ng ho·∫∑c kh√¥ng c√≥ d·ªØ li·ªáu ph√π h·ª£p!")
                st.stop()
            extra_info = ""
            if matched_names:
                extra_info = f"(ƒê√£ d√≤ g·∫ßn ƒë√∫ng t√™n kh√°ch h√†ng: {matched_names})\n"


            with st.spinner(f"üß† ƒêang g·ª≠i d·ªØ li·ªáu cho AI..."):
                ai_answer, used_prompt = query_openai(
                    user_question=user_question,
                    df_summary=summary,
                    api_key=OPENAI_API_KEY,
                    model=ai_model,
                    matched_names=matched_names
                )
            st.session_state.chat_history = (st.session_state.chat_history + [{
                "q": user_question,
                "a": ai_answer,
                "tbl": summary
            }])[-5:]
            st.success("AI tr·∫£ l·ªùi:")
            st.markdown(f"> {ai_answer}")
            show_table(
                "B·∫£ng t√≥m t·∫Øt",
                summary,
                highlight_cols=["S·ªë l∆∞·ª£ng"],
                key="download_button_latest"
            )


    # ========== D∆∞·ªõi ƒë√¢y l√† MENU TRUY V·∫§N NHANH S·ª¨ D·ª§NG MODULE ==========
    st.sidebar.subheader("‚ö° Ch·ªçn m·∫´u truy v·∫•n nhanh")

    truyvan_options = [
        "T·ªïng s·ªë s·∫£n ph·∫©m ti·∫øp nh·∫≠n theo th√°ng/nƒÉm/qu√Ω",
        "T·ª∑ l·ªá s·ª≠a ch·ªØa th√†nh c√¥ng theo th√°ng/nƒÉm/qu√Ω",
        "Danh s√°ch s·∫£n ph·∫©m ch∆∞a s·ª≠a xong trong kho·∫£ng th·ªùi gian",
        "Top 5 kh√°ch h√†ng g·ª≠i nhi·ªÅu s·∫£n ph·∫©m nh·∫•t",
        "Kh√°ch h√†ng g·ª≠i s·∫£n ph·∫©m g√¨ nhi·ªÅu nh·∫•t",
        "T·ªïng s·∫£n ph·∫©m kh√°ch h√†ng g·ª≠i trong nƒÉm/qu√Ω/th√°ng",
        "Top 5 s·∫£n ph·∫©m b·∫£o h√†nh nhi·ªÅu nh·∫•t",
        "Top s·∫£n ph·∫©m th∆∞·ªùng b·ªã t·ª´ ch·ªëi b·∫£o h√†nh",
        "S·∫£n ph·∫©m c√≥ bao nhi√™u l∆∞·ª£t s·ª≠a th√†nh c√¥ng/kh√¥ng s·ª≠a ƒë∆∞·ª£c",
        "Top 5 l·ªói k·ªπ thu·∫≠t th∆∞·ªùng g·∫∑p nh·∫•t",
        "L·ªói n√†o th∆∞·ªùng g·∫∑p nh·∫•t v·ªõi s·∫£n ph·∫©m X",
        "Kh√°ch h√†ng th∆∞·ªùng g·∫∑p l·ªói g√¨ nh·∫•t v·ªõi s·∫£n ph·∫©m Y",
        "Th·ªëng k√™ s·ªë l∆∞·ª£ng ƒë√£ s·ª≠a xong / kh√¥ng s·ª≠a ƒë∆∞·ª£c / t·ª´ ch·ªëi b·∫£o h√†nh",
        "T·ª∑ l·ªá ph·∫ßn trƒÉm s·ª≠a th√†nh c√¥ng tr√™n t·ªïng s·ªë ti·∫øp nh·∫≠n",
        "Danh s√°ch s·∫£n ph·∫©m b·ªã t·ª´ ch·ªëi b·∫£o h√†nh trong th√°ng/nƒÉm",
        "Top 3 kh√°ch h√†ng g·ª≠i s·∫£n ph·∫©m X nhi·ªÅu nh·∫•t trong nƒÉm",
        "Top 5 l·ªói ph√°t sinh ·ªü kh√°ch h√†ng B trong qu√Ω",
        "T·ª∑ l·ªá s·ª≠a th√†nh c√¥ng s·∫£n ph·∫©m X c·ªßa kh√°ch h√†ng Y trong th√°ng",
        "Top k·ªπ thu·∫≠t vi√™n x·ª≠ l√Ω nhi·ªÅu s·∫£n ph·∫©m nh·∫•t",
        "T·ª∑ l·ªá s·ª≠a th√†nh c√¥ng c·ªßa k·ªπ thu·∫≠t vi√™n theo nƒÉm/qu√Ω/th√°ng",
        "Th·ªëng k√™ s·ªë l∆∞·ª£ng s·∫£n ph·∫©m m·ªói k·ªπ thu·∫≠t vi√™n ƒë√£ x·ª≠ l√Ω, chia theo tr·∫°ng th√°i (ƒë√£ s·ª≠a xong/kh√¥ng s·ª≠a ƒë∆∞·ª£c/t·ª´ ch·ªëi b·∫£o h√†nh)"
    ]

    selected_query = st.sidebar.selectbox("Ch·ªçn truy v·∫•n", ["-- Kh√¥ng ch·ªçn --"] + truyvan_options)
    st.subheader("üìä K·∫øt qu·∫£ truy v·∫•n:")

    if selected_query == truyvan_options[0]:
        group_by = st.sidebar.selectbox("Nh√≥m theo", ["Th√°ng", "NƒÉm", "Qu√Ω"])
        if group_by != "--":
            title, df_out = rma_query_templates.query_1_total_by_group(data_filtered, group_by)
            show_table(title, df_out, highlight_cols=["S·ªë l∆∞·ª£ng"])

    elif selected_query == truyvan_options[1]:
        group_by = st.sidebar.selectbox("Nh√≥m theo", ["Th√°ng", "NƒÉm", "Qu√Ω"])
        if group_by != "--":
            title, df_out = rma_query_templates.query_2_success_rate_by_group(data_filtered, group_by)
            show_table(title, df_out, highlight_cols=["T·ª∑ l·ªá s·ª≠a th√†nh c√¥ng (%)"])

    elif selected_query == truyvan_options[2]:
        title, df_out = rma_query_templates.query_3_unrepaired_products(data_filtered)
        show_table(title, df_out)

    elif selected_query == truyvan_options[3]:
        title, df_out = rma_query_templates.query_4_top_customers(data_filtered)
        show_table(title, df_out, highlight_cols=["S·ªë l∆∞·ª£ng"])

    elif selected_query == truyvan_options[4]:
        kh = st.sidebar.selectbox("Ch·ªçn kh√°ch h√†ng", data_filtered[find_col(data_filtered.columns, "kh√°ch h√†ng")].dropna().unique())
        if kh != "--":
            title, df_out = rma_query_templates.query_5_top_products_by_customer(data_filtered, kh)
            show_table(title, df_out, highlight_cols=["S·ªë l∆∞·ª£ng"])

        truyvan_options = [
            "T·ªïng s·ªë s·∫£n ph·∫©m ti·∫øp nh·∫≠n theo th√°ng/nƒÉm/qu√Ω",
            "T·ª∑ l·ªá s·ª≠a ch·ªØa th√†nh c√¥ng theo th√°ng/nƒÉm/qu√Ω",
            "Danh s√°ch s·∫£n ph·∫©m ch∆∞a s·ª≠a xong trong kho·∫£ng th·ªùi gian",
            "Top 5 kh√°ch h√†ng g·ª≠i nhi·ªÅu s·∫£n ph·∫©m nh·∫•t",
            "Kh√°ch h√†ng g·ª≠i s·∫£n ph·∫©m g√¨ nhi·ªÅu nh·∫•t",
            "T·ªïng s·∫£n ph·∫©m kh√°ch h√†ng g·ª≠i trong nƒÉm/qu√Ω/th√°ng",
            "Top 5 s·∫£n ph·∫©m b·∫£o h√†nh nhi·ªÅu nh·∫•t",
            "Top s·∫£n ph·∫©m th∆∞·ªùng b·ªã t·ª´ ch·ªëi b·∫£o h√†nh",
            "S·∫£n ph·∫©m c√≥ bao nhi√™u l∆∞·ª£t s·ª≠a th√†nh c√¥ng/kh√¥ng s·ª≠a ƒë∆∞·ª£c",
            "Top 5 l·ªói k·ªπ thu·∫≠t th∆∞·ªùng g·∫∑p nh·∫•t",
            "L·ªói n√†o th∆∞·ªùng g·∫∑p nh·∫•t v·ªõi s·∫£n ph·∫©m X",
            "Kh√°ch h√†ng th∆∞·ªùng g·∫∑p l·ªói g√¨ nh·∫•t v·ªõi s·∫£n ph·∫©m Y",
            "Th·ªëng k√™ s·ªë l∆∞·ª£ng ƒë√£ s·ª≠a xong / kh√¥ng s·ª≠a ƒë∆∞·ª£c / t·ª´ ch·ªëi b·∫£o h√†nh",
            "T·ª∑ l·ªá ph·∫ßn trƒÉm s·ª≠a th√†nh c√¥ng tr√™n t·ªïng s·ªë ti·∫øp nh·∫≠n",
            "Danh s√°ch s·∫£n ph·∫©m b·ªã t·ª´ ch·ªëi b·∫£o h√†nh trong th√°ng/nƒÉm",
            "Top 3 kh√°ch h√†ng g·ª≠i s·∫£n ph·∫©m X nhi·ªÅu nh·∫•t trong nƒÉm",
            "Top 5 l·ªói ph√°t sinh ·ªü kh√°ch h√†ng B trong qu√Ω",
            "T·ª∑ l·ªá s·ª≠a th√†nh c√¥ng s·∫£n ph·∫©m X c·ªßa kh√°ch h√†ng Y trong th√°ng",
            "Top k·ªπ thu·∫≠t vi√™n x·ª≠ l√Ω nhi·ªÅu s·∫£n ph·∫©m nh·∫•t",
            "T·ª∑ l·ªá s·ª≠a th√†nh c√¥ng c·ªßa k·ªπ thu·∫≠t vi√™n theo nƒÉm/qu√Ω/th√°ng",
            "Th·ªëng k√™ s·ªë l∆∞·ª£ng s·∫£n ph·∫©m m·ªói k·ªπ thu·∫≠t vi√™n ƒë√£ x·ª≠ l√Ω, chia theo tr·∫°ng th√°i (ƒë√£ s·ª≠a xong/kh√¥ng s·ª≠a ƒë∆∞·ª£c/t·ª´ ch·ªëi b·∫£o h√†nh)"
        ]
        st.sidebar.subheader("‚ö° Ch·ªçn m·∫´u truy v·∫•n nhanh")
        selected_query = st.sidebar.selectbox("Ch·ªçn truy v·∫•n", ["-- Kh√¥ng ch·ªçn --"] + truyvan_options)

        # ================== TRUY V·∫§N D√ôNG data_filtered ===================
        if selected_query != "-- Kh√¥ng ch·ªçn --":
            customer_col = find_col(data_filtered.columns, "khach hang")
            product_col  = find_col(data_filtered.columns, "san pham")
            error_col    = find_col(data_filtered.columns, "ten loi")
            ok_col       = find_col(data_filtered.columns, "da sua xong")
            fail_col     = find_col(data_filtered.columns, "khong sua duoc")
            tcbh_col     = find_col(data_filtered.columns, "tu choi bao hanh")
            tech_col     = find_col(data_filtered.columns, "ky thuat vien")
            date_col     = find_col(data_filtered.columns, "ngay tiep nhan")

            def sidebar_selectbox(label, options):
                return st.sidebar.selectbox(label, ["--"] + list(options))
            def sidebar_multiselect(label, options):
                return st.sidebar.multiselect(label, list(options))

            st.subheader("üìä K·∫øt qu·∫£ truy v·∫•n:")

            # 1. T·ªïng s·ªë s·∫£n ph·∫©m ti·∫øp nh·∫≠n theo th√°ng/nƒÉm/qu√Ω
            if selected_query == truyvan_options[0]:
                group_by = sidebar_selectbox("Nh√≥m theo", ["Th√°ng", "NƒÉm", "Qu√Ω"])
                if group_by != "--":
                    count_df = data_filtered.groupby(group_by).size().reset_index(name="S·ªë l∆∞·ª£ng")
                    show_table(f"T·ªïng s·ªë s·∫£n ph·∫©m ti·∫øp nh·∫≠n theo {group_by.lower()}", count_df, highlight_cols=["S·ªë l∆∞·ª£ng"])

            # 2. T·ª∑ l·ªá s·ª≠a ch·ªØa th√†nh c√¥ng theo th√°ng/nƒÉm/qu√Ω
            elif selected_query == truyvan_options[1]:
                group_by = sidebar_selectbox("Nh√≥m theo", ["Th√°ng", "NƒÉm", "Qu√Ω"])
                if group_by != "--" and ok_col and fail_col and tcbh_col:
                    df2 = data_filtered.copy()
                    df2["OK"] = (df2[ok_col] == 1).astype(int)
                    df2["FAIL"] = (df2[fail_col] == 1).astype(int)
                    df2["TCBH"] = (df2[tcbh_col] == 1).astype(int)
                    g = df2.groupby(group_by).agg(
                        ok = ("OK", "sum"),
                        fail = ("FAIL", "sum"),
                        tcbh = ("TCBH", "sum"),
                    ).reset_index()
                    g["T·ª∑ l·ªá s·ª≠a th√†nh c√¥ng (%)"] = round(g["ok"] / (g["ok"] + g["fail"] + g["tcbh"]) * 100, 2)
                    show_table(f"T·ª∑ l·ªá s·ª≠a ch·ªØa th√†nh c√¥ng theo {group_by.lower()}", g[[group_by, "ok", "fail", "tcbh", "T·ª∑ l·ªá s·ª≠a th√†nh c√¥ng (%)"]], highlight_cols=["T·ª∑ l·ªá s·ª≠a th√†nh c√¥ng (%)"])

            # 3. Danh s√°ch s·∫£n ph·∫©m ch∆∞a s·ª≠a xong trong kho·∫£ng th·ªùi gian
            elif selected_query == truyvan_options[2]:
                if date_col and ok_col:
                    df3 = data_filtered[data_filtered[ok_col] != 1]
                    show_table("Danh s√°ch s·∫£n ph·∫©m ch∆∞a s·ª≠a xong", df3[[date_col, customer_col, product_col, ok_col]])
                else:
                    st.error("Kh√¥ng t√¨m th·∫•y c·ªôt ng√†y ho·∫∑c tr·∫°ng th√°i 'ƒê√£ s·ª≠a xong'!")

            # 4. Top 5 kh√°ch h√†ng g·ª≠i nhi·ªÅu s·∫£n ph·∫©m nh·∫•t
            elif selected_query == truyvan_options[3]:
                top_kh = data_filtered[customer_col].value_counts().head(5)
                df_kh = pd.DataFrame({"Kh√°ch h√†ng": top_kh.index, "S·ªë l∆∞·ª£ng": top_kh.values})
                show_table("Top 5 kh√°ch h√†ng g·ª≠i nhi·ªÅu s·∫£n ph·∫©m nh·∫•t", df_kh, highlight_cols=["S·ªë l∆∞·ª£ng"])

            # 5. Kh√°ch h√†ng g·ª≠i s·∫£n ph·∫©m g√¨ nhi·ªÅu nh·∫•t
            elif selected_query == truyvan_options[4]:
                kh = sidebar_selectbox("Ch·ªçn kh√°ch h√†ng", data_filtered[customer_col].dropna().unique())
                if kh != "--":
                    top_sp = data_filtered[data_filtered[customer_col] == kh][product_col].value_counts().head(5)
                    df_sp = pd.DataFrame({"S·∫£n ph·∫©m": top_sp.index, "S·ªë l∆∞·ª£ng": top_sp.values})
                    show_table(f"Top s·∫£n ph·∫©m kh√°ch h√†ng {kh} ƒë√£ g·ª≠i", df_sp, highlight_cols=["S·ªë l∆∞·ª£ng"])

            # 6. T·ªïng s·∫£n ph·∫©m kh√°ch h√†ng g·ª≠i trong nƒÉm/qu√Ω/th√°ng
            elif selected_query == truyvan_options[5]:
                kh = sidebar_selectbox("Ch·ªçn kh√°ch h√†ng", data_filtered[customer_col].dropna().unique())
                group_by = sidebar_selectbox("Nh√≥m theo", ["NƒÉm", "Qu√Ω", "Th√°ng"])
                if kh != "--" and group_by != "--":
                    df6 = data_filtered[data_filtered[customer_col] == kh]
                    count_df = df6.groupby(group_by).size().reset_index(name="S·ªë l∆∞·ª£ng")
                    show_table(f"T·ªïng s·∫£n ph·∫©m kh√°ch h√†ng {kh} g·ª≠i theo {group_by.lower()}", count_df, highlight_cols=["S·ªë l∆∞·ª£ng"])

            # 7. Top 5 s·∫£n ph·∫©m b·∫£o h√†nh nhi·ªÅu nh·∫•t
            elif selected_query == truyvan_options[6]:
                top_sp = data_filtered[product_col].value_counts().head(5)
                df_sp = pd.DataFrame({"S·∫£n ph·∫©m": top_sp.index, "S·ªë l∆∞·ª£ng": top_sp.values})
                show_table("Top 5 s·∫£n ph·∫©m b·∫£o h√†nh nhi·ªÅu nh·∫•t", df_sp, highlight_cols=["S·ªë l∆∞·ª£ng"])

            # 8. Top s·∫£n ph·∫©m th∆∞·ªùng b·ªã t·ª´ ch·ªëi b·∫£o h√†nh
            elif selected_query == truyvan_options[7]:
                if tcbh_col:
                    top_sp = data_filtered[data_filtered[tcbh_col] == 1][product_col].value_counts().head(5)
                    df_sp = pd.DataFrame({"S·∫£n ph·∫©m": top_sp.index, "S·ªë l∆∞·ª£ng": top_sp.values})
                    show_table("Top s·∫£n ph·∫©m b·ªã t·ª´ ch·ªëi b·∫£o h√†nh nhi·ªÅu nh·∫•t", df_sp, highlight_cols=["S·ªë l∆∞·ª£ng"])
                else:
                    st.error("Kh√¥ng t√¨m th·∫•y c·ªôt 'T·ª´ ch·ªëi b·∫£o h√†nh' trong d·ªØ li·ªáu!")

            # 9. S·∫£n ph·∫©m c√≥ bao nhi√™u l∆∞·ª£t s·ª≠a th√†nh c√¥ng/kh√¥ng s·ª≠a ƒë∆∞·ª£c
            elif selected_query == truyvan_options[8]:
                sp = sidebar_selectbox("Ch·ªçn s·∫£n ph·∫©m", data_filtered[product_col].dropna().unique())
                if sp != "--" and ok_col and fail_col and tcbh_col:
                    df9 = data_filtered[data_filtered[product_col] == sp]
                    ok = (df9[ok_col] == 1).sum()
                    fail = (df9[fail_col] == 1).sum()
                    tcbh = (df9[tcbh_col] == 1).sum()
                    df_stat = pd.DataFrame({
                        "Tr·∫°ng th√°i": ["S·ª≠a xong", "Kh√¥ng s·ª≠a ƒë∆∞·ª£c", "T·ª´ ch·ªëi BH"],
                        "S·ªë l∆∞·ª£ng": [ok, fail, tcbh]
                    })
                    show_table(f"S·ªë l∆∞·ª£t x·ª≠ l√Ω c·ªßa {sp}", df_stat, highlight_cols=["S·ªë l∆∞·ª£ng"])
                else:
                    st.error("Kh√¥ng t√¨m th·∫•y c√°c c·ªôt tr·∫°ng th√°i x·ª≠ l√Ω trong d·ªØ li·ªáu!")

            # 10. Top 5 l·ªói k·ªπ thu·∫≠t th∆∞·ªùng g·∫∑p nh·∫•t
            elif selected_query == truyvan_options[9]:
                if error_col:
                    top_err = data_filtered[error_col].value_counts().head(5)
                    df_err = pd.DataFrame({"L·ªói k·ªπ thu·∫≠t": top_err.index, "S·ªë l·∫ßn": top_err.values})
                    show_table("Top 5 l·ªói k·ªπ thu·∫≠t th∆∞·ªùng g·∫∑p nh·∫•t", df_err, highlight_cols=["S·ªë l·∫ßn"])
                else:
                    st.error("Kh√¥ng t√¨m th·∫•y c·ªôt t√™n l·ªói!")

            # 11. L·ªói n√†o th∆∞·ªùng g·∫∑p nh·∫•t v·ªõi s·∫£n ph·∫©m X
            elif selected_query == truyvan_options[10]:
                sp = sidebar_selectbox("Ch·ªçn s·∫£n ph·∫©m", data_filtered[product_col].dropna().unique())
                if sp != "--" and error_col:
                    top_err = data_filtered[data_filtered[product_col] == sp][error_col].value_counts().head(5)
                    df_err = pd.DataFrame({"L·ªói k·ªπ thu·∫≠t": top_err.index, "S·ªë l·∫ßn": top_err.values})
                    show_table(f"Top l·ªói th∆∞·ªùng g·∫∑p nh·∫•t c·ªßa s·∫£n ph·∫©m {sp}", df_err, highlight_cols=["S·ªë l·∫ßn"])

            # 12. Kh√°ch h√†ng th∆∞·ªùng g·∫∑p l·ªói g√¨ nh·∫•t v·ªõi s·∫£n ph·∫©m Y
            elif selected_query == truyvan_options[11]:
                kh = sidebar_selectbox("Ch·ªçn kh√°ch h√†ng", data_filtered[customer_col].dropna().unique())
                sp = sidebar_selectbox("Ch·ªçn s·∫£n ph·∫©m", data_filtered[product_col].dropna().unique())
                if kh != "--" and sp != "--" and error_col:
                    top_err = data_filtered[(data_filtered[customer_col] == kh) & (data_filtered[product_col] == sp)][error_col].value_counts().head(5)
                    df_err = pd.DataFrame({"L·ªói k·ªπ thu·∫≠t": top_err.index, "S·ªë l·∫ßn": top_err.values})
                    show_table(f"Top l·ªói kh√°ch h√†ng {kh} g·∫∑p v·ªõi {sp}", df_err, highlight_cols=["S·ªë l·∫ßn"])

            # 13. Th·ªëng k√™ s·ªë l∆∞·ª£ng ƒë√£ s·ª≠a xong / kh√¥ng s·ª≠a ƒë∆∞·ª£c / t·ª´ ch·ªëi b·∫£o h√†nh
            elif selected_query == truyvan_options[12]:
                if ok_col and fail_col and tcbh_col:
                    ok = (data_filtered[ok_col] == 1).sum()
                    fail = (data_filtered[fail_col] == 1).sum()
                    tcbh = (data_filtered[tcbh_col] == 1).sum()
                    total = ok + fail + tcbh
                    df_stat = pd.DataFrame({
                        "Tr·∫°ng th√°i": ["S·ª≠a xong", "Kh√¥ng s·ª≠a ƒë∆∞·ª£c", "T·ª´ ch·ªëi BH"],
                        "S·ªë l∆∞·ª£ng": [ok, fail, tcbh]
                    })
                    show_table("Th·ªëng k√™ s·ªë l∆∞·ª£ng x·ª≠ l√Ω theo tr·∫°ng th√°i", df_stat, highlight_cols=["S·ªë l∆∞·ª£ng"])
                    st.markdown(f"**T·ªïng ƒë√£ x·ª≠ l√Ω: {total}**", unsafe_allow_html=True)
                else:
                    st.error("Kh√¥ng t√¨m th·∫•y c√°c c·ªôt tr·∫°ng th√°i x·ª≠ l√Ω trong d·ªØ li·ªáu!")

            # 14. T·ª∑ l·ªá ph·∫ßn trƒÉm s·ª≠a th√†nh c√¥ng tr√™n t·ªïng s·ªë ti·∫øp nh·∫≠n
            elif selected_query == truyvan_options[13]:
                if ok_col and fail_col and tcbh_col:
                    ok = (data_filtered[ok_col] == 1).sum()
                    fail = (data_filtered[fail_col] == 1).sum()
                    tcbh = (data_filtered[tcbh_col] == 1).sum()
                    total = ok + fail + tcbh
                    percent = round(ok / total * 100, 2) if total > 0 else 0
                    df_percent = pd.DataFrame({"T·ªïng x·ª≠ l√Ω": [total], "S·ª≠a th√†nh c√¥ng (%)": [percent]})
                    show_table("T·ª∑ l·ªá s·ª≠a th√†nh c√¥ng tr√™n t·ªïng s·ªë ti·∫øp nh·∫≠n", df_percent, highlight_cols=["S·ª≠a th√†nh c√¥ng (%)"])
                else:
                    st.error("Kh√¥ng t√¨m th·∫•y c√°c c·ªôt tr·∫°ng th√°i x·ª≠ l√Ω trong d·ªØ li·ªáu!")

            # 15. Danh s√°ch s·∫£n ph·∫©m b·ªã t·ª´ ch·ªëi b·∫£o h√†nh trong th√°ng/nƒÉm
            elif selected_query == truyvan_options[14]:
                if tcbh_col:
                    df15 = data_filtered[data_filtered[tcbh_col] == 1]
                    show_table("S·∫£n ph·∫©m b·ªã t·ª´ ch·ªëi b·∫£o h√†nh", df15[[product_col, customer_col, "Th√°ng", "NƒÉm"]])
                else:
                    st.error("Kh√¥ng t√¨m th·∫•y c·ªôt t·ª´ ch·ªëi b·∫£o h√†nh!")

            # 16. Top 3 kh√°ch h√†ng g·ª≠i s·∫£n ph·∫©m X nhi·ªÅu nh·∫•t trong nƒÉm
            elif selected_query == truyvan_options[15]:
                sp = sidebar_selectbox("Ch·ªçn s·∫£n ph·∫©m", data_filtered[product_col].dropna().unique())
                if sp != "--":
                    top_kh = data_filtered[data_filtered[product_col] == sp][customer_col].value_counts().head(3)
                    df_kh = pd.DataFrame({"Kh√°ch h√†ng": top_kh.index, "S·ªë l∆∞·ª£ng": top_kh.values})
                    show_table(f"Top 3 kh√°ch h√†ng g·ª≠i {sp} nhi·ªÅu nh·∫•t", df_kh, highlight_cols=["S·ªë l∆∞·ª£ng"])

            # 17. Top 5 l·ªói ph√°t sinh ·ªü kh√°ch h√†ng B trong qu√Ω
            elif selected_query == truyvan_options[16]:
                kh = sidebar_selectbox("Ch·ªçn kh√°ch h√†ng", data_filtered[customer_col].dropna().unique())
                q = sidebar_selectbox("Ch·ªçn qu√Ω", sorted(data_filtered["Qu√Ω"].dropna().unique()))
                if kh != "--" and q != "--" and error_col:
                    df17 = data_filtered[(data_filtered[customer_col] == kh) & (data_filtered["Qu√Ω"] == q)]
                    top_err = df17[error_col].value_counts().head(5)
                    df_err = pd.DataFrame({"L·ªói k·ªπ thu·∫≠t": top_err.index, "S·ªë l·∫ßn": top_err.values})
                    show_table(f"Top l·ªói c·ªßa {kh} trong qu√Ω {q}", df_err, highlight_cols=["S·ªë l·∫ßn"])

            # 18. T·ª∑ l·ªá s·ª≠a th√†nh c√¥ng s·∫£n ph·∫©m X c·ªßa kh√°ch h√†ng Y trong th√°ng
            elif selected_query == truyvan_options[17]:
                sp = sidebar_selectbox("Ch·ªçn s·∫£n ph·∫©m", data_filtered[product_col].dropna().unique())
                kh = sidebar_selectbox("Ch·ªçn kh√°ch h√†ng", data_filtered[customer_col].dropna().unique())
                th = sidebar_selectbox("Ch·ªçn th√°ng", sorted(data_filtered["Th√°ng"].dropna().unique()))
                if sp != "--" and kh != "--" and th != "--" and ok_col and fail_col and tcbh_col:
                    df18 = data_filtered[
                        (data_filtered[product_col] == sp) &
                        (data_filtered[customer_col] == kh) &
                        (data_filtered["Th√°ng"] == th)
                    ]
                    ok = (df18[ok_col] == 1).sum()
                    fail = (df18[fail_col] == 1).sum()
                    tcbh = (df18[tcbh_col] == 1).sum()
                    total = ok + fail + tcbh
                    percent = round(ok / total * 100, 2) if total > 0 else 0
                    df_percent = pd.DataFrame({"T·ªïng x·ª≠ l√Ω": [total], "S·ª≠a th√†nh c√¥ng (%)": [percent]})
                    show_table(f"T·ª∑ l·ªá s·ª≠a th√†nh c√¥ng {sp} c·ªßa {kh} trong th√°ng {th}", df_percent, highlight_cols=["S·ª≠a th√†nh c√¥ng (%)"])
                else:
                    st.error("Kh√¥ng t√¨m th·∫•y c√°c c·ªôt tr·∫°ng th√°i x·ª≠ l√Ω trong d·ªØ li·ªáu!")

            # 19. Top 5 k·ªπ thu·∫≠t vi√™n x·ª≠ l√Ω nhi·ªÅu s·∫£n ph·∫©m nh·∫•t
            elif selected_query == truyvan_options[18]:
                if tech_col:
                    top_ktv = data_filtered[tech_col].value_counts().head(5)
                    df_ktv = pd.DataFrame({"K·ªπ thu·∫≠t vi√™n": top_ktv.index, "S·ªë l∆∞·ª£ng": top_ktv.values})
                    show_table("Top k·ªπ thu·∫≠t vi√™n x·ª≠ l√Ω nhi·ªÅu s·∫£n ph·∫©m nh·∫•t", df_ktv, highlight_cols=["S·ªë l∆∞·ª£ng"])
                else:
                    st.error("Kh√¥ng t√¨m th·∫•y c·ªôt 'K·ªπ thu·∫≠t vi√™n' trong d·ªØ li·ªáu!")

            # 20. T·ª∑ l·ªá s·ª≠a th√†nh c√¥ng c·ªßa k·ªπ thu·∫≠t vi√™n theo nƒÉm/qu√Ω/th√°ng
            elif selected_query == truyvan_options[19]:
                group_by = sidebar_selectbox("Nh√≥m theo", ["NƒÉm", "Qu√Ω", "Th√°ng"])
                if tech_col and ok_col and fail_col and tcbh_col and group_by != "--":
                    df20 = data_filtered.copy()
                    df20["OK"] = (df20[ok_col] == 1).astype(int)
                    df20["FAIL"] = (df20[fail_col] == 1).astype(int)
                    df20["TCBH"] = (df20[tcbh_col] == 1).astype(int)
                    group = [group_by, tech_col]
                    g = df20.groupby(group).agg(
                        ok = ("OK", "sum"),
                        fail = ("FAIL", "sum"),
                        tcbh = ("TCBH", "sum"),
                    ).reset_index()
                    g["T·ª∑ l·ªá s·ª≠a th√†nh c√¥ng (%)"] = round(g["ok"] / (g["ok"] + g["fail"] + g["tcbh"]) * 100, 2)
                    show_table(f"T·ª∑ l·ªá s·ª≠a th√†nh c√¥ng c·ªßa k·ªπ thu·∫≠t vi√™n theo {group_by.lower()}", g[[group_by, tech_col, "ok", "fail", "tcbh", "T·ª∑ l·ªá s·ª≠a th√†nh c√¥ng (%)"]], highlight_cols=["T·ª∑ l·ªá s·ª≠a th√†nh c√¥ng (%)"])
                else:
                    st.error("Kh√¥ng t√¨m th·∫•y c·ªôt k·ªπ thu·∫≠t vi√™n ho·∫∑c c·ªôt tr·∫°ng th√°i!")

            # 21. Th·ªëng k√™ s·ªë l∆∞·ª£ng s·∫£n ph·∫©m m·ªói k·ªπ thu·∫≠t vi√™n ƒë√£ x·ª≠ l√Ω, chia theo tr·∫°ng th√°i (ƒë√£ s·ª≠a xong/kh√¥ng s·ª≠a ƒë∆∞·ª£c/t·ª´ ch·ªëi b·∫£o h√†nh)
            elif selected_query == truyvan_options[20]:
                if tech_col and ok_col and fail_col and tcbh_col:
                    g = data_filtered.groupby(tech_col).agg(
                        ok   = (ok_col,   lambda x: (x == 1).sum()),
                        fail = (fail_col, lambda x: (x == 1).sum()),
                        tcbh = (tcbh_col, lambda x: (x == 1).sum()),
                    ).reset_index()
                    g["T·ªïng x·ª≠ l√Ω"] = g["ok"] + g["fail"] + g["tcbh"]
                    g["T·ª∑ l·ªá s·ª≠a th√†nh c√¥ng (%)"] = g.apply(
                        lambda row: round(row["ok"] / row["T·ªïng x·ª≠ l√Ω"] * 100, 2) if row["T·ªïng x·ª≠ l√Ω"] > 0 else 0, axis=1
                    )
                    show_table(
                        "Th·ªëng k√™ s·ªë l∆∞·ª£ng s·∫£n ph·∫©m m·ªói k·ªπ thu·∫≠t vi√™n ƒë√£ x·ª≠ l√Ω",
                        g.rename(columns={
                            "ok": "S·ª≠a xong",
                            "fail": "Kh√¥ng s·ª≠a ƒë∆∞·ª£c",
                            "tcbh": "T·ª´ ch·ªëi BH",
                            "T·ªïng x·ª≠ l√Ω": "T·ªïng x·ª≠ l√Ω",
                            "T·ª∑ l·ªá s·ª≠a th√†nh c√¥ng (%)": "T·ª∑ l·ªá s·ª≠a th√†nh c√¥ng (%)"
                        }),
                        highlight_cols=[
                            "S·ª≠a xong", "Kh√¥ng s·ª≠a ƒë∆∞·ª£c", "T·ª´ ch·ªëi BH",
                            "T·ªïng x·ª≠ l√Ω", "T·ª∑ l·ªá s·ª≠a th√†nh c√¥ng (%)"
                        ]
                    )
                else:
                    st.error("Kh√¥ng t√¨m th·∫•y c·ªôt k·ªπ thu·∫≠t vi√™n ho·∫∑c c·ªôt tr·∫°ng th√°i!")

    elif selected_query == truyvan_options[5]:
        kh = st.sidebar.selectbox("Ch·ªçn kh√°ch h√†ng", data_filtered[find_col(data_filtered.columns, "kh√°ch h√†ng")].dropna().unique())
        group_by = st.sidebar.selectbox("Nh√≥m theo", ["NƒÉm", "Qu√Ω", "Th√°ng"])
        if kh != "--" and group_by != "--":
            title, df_out = rma_query_templates.query_6_total_by_customer_and_time(data_filtered, kh, group_by)
            show_table(title, df_out, highlight_cols=["S·ªë l∆∞·ª£ng"])

    elif selected_query == truyvan_options[6]:
        title, df_out = rma_query_templates.query_7_top_products(data_filtered)
        show_table(title, df_out, highlight_cols=["S·ªë l∆∞·ª£ng"])

    elif selected_query == truyvan_options[7]:
        title, df_out = rma_query_templates.query_8_top_rejected_products(data_filtered)
        show_table(title, df_out, highlight_cols=["S·ªë l∆∞·ª£ng"])

    elif selected_query == truyvan_options[8]:
        sp = st.sidebar.selectbox("Ch·ªçn s·∫£n ph·∫©m", data_filtered[find_col(data_filtered.columns, "s·∫£n ph·∫©m")].dropna().unique())
        if sp != "--":
            title, df_out = rma_query_templates.query_9_product_status_counts(data_filtered, sp)
            show_table(title, df_out, highlight_cols=["S·ªë l∆∞·ª£ng"])

    elif selected_query == truyvan_options[9]:
        title, df_out = rma_query_templates.query_10_top_errors(data_filtered)
        show_table(title, df_out, highlight_cols=["S·ªë l·∫ßn"])

    elif selected_query == truyvan_options[10]:
        sp = st.sidebar.selectbox("Ch·ªçn s·∫£n ph·∫©m", data_filtered[find_col(data_filtered.columns, "s·∫£n ph·∫©m")].dropna().unique())
        if sp != "--":
            title, df_out = rma_query_templates.query_11_top_errors_by_product(data_filtered, sp)
            show_table(title, df_out, highlight_cols=["S·ªë l·∫ßn"])

    elif selected_query == truyvan_options[11]:
        kh = st.sidebar.selectbox("Ch·ªçn kh√°ch h√†ng", data_filtered[find_col(data_filtered.columns, "kh√°ch h√†ng")].dropna().unique())
        sp = st.sidebar.selectbox("Ch·ªçn s·∫£n ph·∫©m", data_filtered[find_col(data_filtered.columns, "s·∫£n ph·∫©m")].dropna().unique())
        if kh != "--" and sp != "--":
            title, df_out = rma_query_templates.query_12_errors_by_customer_and_product(data_filtered, kh, sp)
            show_table(title, df_out, highlight_cols=["S·ªë l·∫ßn"])

    elif selected_query == truyvan_options[12]:
        title, df_out = rma_query_templates.query_13_status_summary(data_filtered)
        show_table(title, df_out, highlight_cols=["S·ªë l∆∞·ª£ng"])

    elif selected_query == truyvan_options[13]:
        title, df_out = rma_query_templates.query_14_success_rate_overall(data_filtered)
        show_table(title, df_out, highlight_cols=["S·ª≠a th√†nh c√¥ng (%)"])

    elif selected_query == truyvan_options[14]:
        title, df_out = rma_query_templates.query_15_rejected_products_by_time(data_filtered)
        show_table(title, df_out)

    elif selected_query == truyvan_options[15]:
        sp = st.sidebar.selectbox("Ch·ªçn s·∫£n ph·∫©m", data_filtered[find_col(data_filtered.columns, "s·∫£n ph·∫©m")].dropna().unique())
        if sp != "--":
            title, df_out = rma_query_templates.query_16_top_customers_by_product(data_filtered, sp)
            show_table(title, df_out, highlight_cols=["S·ªë l∆∞·ª£ng"])

    elif selected_query == truyvan_options[16]:
        kh = st.sidebar.selectbox("Ch·ªçn kh√°ch h√†ng", data_filtered[find_col(data_filtered.columns, "kh√°ch h√†ng")].dropna().unique())
        q = st.sidebar.selectbox("Ch·ªçn qu√Ω", sorted(data_filtered["Qu√Ω"].dropna().unique()))
        if kh != "--" and q != "--":
            title, df_out = rma_query_templates.query_17_top_errors_by_customer_and_quarter(data_filtered, kh, q)
            show_table(title, df_out, highlight_cols=["S·ªë l·∫ßn"])

    elif selected_query == truyvan_options[17]:
        sp = st.sidebar.selectbox("Ch·ªçn s·∫£n ph·∫©m", data_filtered[find_col(data_filtered.columns, "s·∫£n ph·∫©m")].dropna().unique())
        kh = st.sidebar.selectbox("Ch·ªçn kh√°ch h√†ng", data_filtered[find_col(data_filtered.columns, "kh√°ch h√†ng")].dropna().unique())
        th = st.sidebar.selectbox("Ch·ªçn th√°ng", sorted(data_filtered["Th√°ng"].dropna().unique()))
        if sp != "--" and kh != "--" and th != "--":
            title, df_out = rma_query_templates.query_18_success_rate_by_customer_product_month(data_filtered, kh, sp, th)
            show_table(title, df_out, highlight_cols=["S·ª≠a th√†nh c√¥ng (%)"])

    elif selected_query == truyvan_options[18]:
        title, df_out = rma_query_templates.query_19_top_technicians(data_filtered)
        show_table(title, df_out, highlight_cols=["S·ªë l∆∞·ª£ng"])

    elif selected_query == truyvan_options[19]:
        group_by = st.sidebar.selectbox("Nh√≥m theo", ["NƒÉm", "Qu√Ω", "Th√°ng"])
        if group_by != "--":
            title, df_out = rma_query_templates.query_20_success_rate_by_technician_and_group(data_filtered, group_by)
            show_table(title, df_out, highlight_cols=["T·ª∑ l·ªá s·ª≠a th√†nh c√¥ng (%)"])

    elif selected_query == truyvan_options[20]:
        title, df_out = rma_query_templates.query_21_technician_status_summary(data_filtered)
        show_table(title, df_out, highlight_cols=["S·ª≠a xong", "Kh√¥ng s·ª≠a ƒë∆∞·ª£c", "T·ª´ ch·ªëi BH", "T·ªïng x·ª≠ l√Ω", "T·ª∑ l·ªá s·ª≠a th√†nh c√¥ng (%)"])

import streamlit as st

import streamlit_authenticator as stauth
import yaml
from yaml.loader import SafeLoader

with open("auth_config.yaml") as file:
    config = yaml.load(file, Loader=SafeLoader)

authenticator = stauth.Authenticate(
    config['credentials'],
    config['cookie']['name'],
    config['cookie']['key'],
    config['cookie']['expiry_days']
)

name, authentication_status, username = authenticator.login("ƒêƒÉng nh·∫≠p", "main")

if authentication_status is False:
    st.error("Sai t√™n ƒëƒÉng nh·∫≠p ho·∫∑c m·∫≠t kh·∫©u")
elif authentication_status is None:
    st.warning("Vui l√≤ng nh·∫≠p th√¥ng tin ƒëƒÉng nh·∫≠p")
elif authentication_status:
    st.sidebar.success(f"Xin ch√†o {name}")
    authenticator.logout("ƒêƒÉng xu·∫•t", "sidebar")

if authentication_status:
    import streamlit_authenticator as stauth
    import yaml
    import pandas as pd
    from yaml.loader import SafeLoader
    from rma_ai import process_ai_query
    from rma_utils import load_data_from_drive, filter_by_time_range
    from rma_query_templates import *
    
    # Load c·∫•u h√¨nh ƒëƒÉng nh·∫≠p t·ª´ file YAML
    with open("auth_config.yaml") as file:
        config = yaml.load(file, Loader=SafeLoader)
    
    authenticator = stauth.Authenticate(
        config['credentials'],
        config['cookie']['name'],
        config['cookie']['key'],
        config['cookie']['expiry_days']
    )
    
    name, authentication_status, username = authenticator.login("ƒêƒÉng nh·∫≠p", "main")
    
    if authentication_status is False:
        st.error("Sai t√™n ƒëƒÉng nh·∫≠p ho·∫∑c m·∫≠t kh·∫©u")
    elif authentication_status is None:
        st.warning("Vui l√≤ng nh·∫≠p th√¥ng tin ƒëƒÉng nh·∫≠p")
    elif authentication_status:
        st.sidebar.success(f"Xin ch√†o {name}")
        authenticator.logout("ƒêƒÉng xu·∫•t", "sidebar")
    
        st.title("üîß Tr·ª£ L√Ω B·∫£o H√†nh AI")
    
        uploaded_file = st.file_uploader("üì§ T·∫£i l√™n file Excel t·ª´ Google Drive (export th·ªß c√¥ng)", type=["xlsx"])
        df = load_data_from_drive(uploaded_file) if uploaded_file else None
    
        if df is not None:
            st.subheader("üìä Truy v·∫•n nhanh")
            query = st.selectbox("Ch·ªçn truy v·∫•n m·∫´u:", [
                "Top 5 kh√°ch h√†ng g·ª≠i nhi·ªÅu nh·∫•t",
                "Top 5 s·∫£n ph·∫©m ph·ªï bi·∫øn nh·∫•t",
                "T·ª∑ l·ªá s·ª≠a ch·ªØa th√†nh c√¥ng",
                "T·ª∑ l·ªá kh√¥ng s·ª≠a ƒë∆∞·ª£c",
                "T·ªïng s·ªë s·∫£n ph·∫©m ƒë√£ ti·∫øp nh·∫≠n",
                "T·ªïng s·ªë s·∫£n ph·∫©m ƒë√£ s·ª≠a xong",
                "T·ªïng s·ªë s·∫£n ph·∫©m kh√¥ng s·ª≠a ƒë∆∞·ª£c",
                "T·ªïng s·ªë s·∫£n ph·∫©m b·ªã t·ª´ ch·ªëi b·∫£o h√†nh",
                "S·ªë l∆∞·ª£ng s·∫£n ph·∫©m theo kh√°ch h√†ng",
                "S·ªë l∆∞·ª£ng s·∫£n ph·∫©m theo nh√≥m h√†ng",
                "S·∫£n ph·∫©m ph·ªï bi·∫øn theo kh√°ch h√†ng",
                "T·ªïng s·ªë s·∫£n ph·∫©m theo th√°ng",
                "T·ªïng s·ªë s·∫£n ph·∫©m theo nƒÉm",
                "Top kh√°ch h√†ng theo nƒÉm",
                "Top s·∫£n ph·∫©m theo qu√Ω",
                "T·ª∑ l·ªá s·ª≠a ch·ªØa theo kh√°ch h√†ng",
                "T·ª∑ l·ªá s·ª≠a ch·ªØa theo nh√≥m h√†ng",
                "T·ªïng s·ªë s·∫£n ph·∫©m theo qu√Ω",
                "S·∫£n ph·∫©m kh√¥ng s·ª≠a ƒë∆∞·ª£c theo nh√≥m h√†ng",
                "Top kh√°ch h√†ng b·ªã t·ª´ ch·ªëi b·∫£o h√†nh",
                "T·ªïng h·ª£p tr·∫°ng th√°i x·ª≠ l√Ω"
            ])
    
            if st.button("Th·ª±c hi·ªán truy v·∫•n"):
                if "kh√°ch h√†ng g·ª≠i nhi·ªÅu" in query:
                    st.dataframe(top_customers(df))
                elif "s·∫£n ph·∫©m ph·ªï bi·∫øn" in query:
                    st.dataframe(top_products(df))
                elif "s·ª≠a ch·ªØa th√†nh c√¥ng" in query:
                    st.dataframe(success_rate(df))
                elif "kh√¥ng s·ª≠a ƒë∆∞·ª£c" in query and "t·ª∑ l·ªá" in query:
                    st.dataframe(failure_rate(df))
                elif "ti·∫øp nh·∫≠n" in query:
                    st.dataframe(total_received(df))
                elif "s·ª≠a xong" in query:
                    st.dataframe(total_repaired(df))
                elif "kh√¥ng s·ª≠a ƒë∆∞·ª£c" in query:
                    st.dataframe(total_failed(df))
                elif "t·ª´ ch·ªëi b·∫£o h√†nh" in query and "b·ªã" not in query:
                    st.dataframe(total_rejected(df))
                elif "theo kh√°ch h√†ng" in query and "s·∫£n ph·∫©m ph·ªï bi·∫øn" not in query:
                    st.dataframe(count_by_customer(df))
                elif "theo nh√≥m h√†ng" in query and "kh√¥ng s·ª≠a" not in query:
                    st.dataframe(count_by_category(df))
                elif "s·∫£n ph·∫©m ph·ªï bi·∫øn theo kh√°ch h√†ng" in query:
                    st.dataframe(top_products_by_customer(df))
                elif "theo th√°ng" in query:
                    st.dataframe(count_by_month(df))
                elif "theo nƒÉm" in query and "kh√°ch h√†ng" not in query:
                    st.dataframe(count_by_year(df))
                elif "top kh√°ch h√†ng theo nƒÉm" in query:
                    st.dataframe(top_customers_by_year(df))
                elif "theo qu√Ω" in query and "s·∫£n ph·∫©m" in query:
                    st.dataframe(top_products_by_quarter(df))
                elif "t·ª∑ l·ªá s·ª≠a ch·ªØa theo kh√°ch h√†ng" in query:
                    st.dataframe(success_rate_by_customer(df))
                elif "t·ª∑ l·ªá s·ª≠a ch·ªØa theo nh√≥m h√†ng" in query:
                    st.dataframe(success_rate_by_category(df))
                elif "t·ªïng s·ªë s·∫£n ph·∫©m theo qu√Ω" in query:
                    st.dataframe(count_by_quarter(df))
                elif "kh√¥ng s·ª≠a ƒë∆∞·ª£c theo nh√≥m h√†ng" in query:
                    st.dataframe(failure_by_category(df))
                elif "b·ªã t·ª´ ch·ªëi b·∫£o h√†nh" in query:
                    st.dataframe(rejected_by_customer(df))
                elif "t·ªïng h·ª£p tr·∫°ng th√°i" in query:
                    st.dataframe(summary_status(df))
    
        st.markdown("---")
        st.subheader("üß† H·ªèi d·ªØ li·ªáu b·∫±ng AI")
        api_key = st.secrets["OPENAI_API_KEY"] if "OPENAI_API_KEY" in st.secrets else st.text_input("Nh·∫≠p OpenAI API Key", type="password")
        user_question = st.text_area("ƒê·∫∑t c√¢u h·ªèi:")
    
        if st.button("Tr·∫£ l·ªùi"):
            if api_key and user_question:
                with st.spinner("ƒêang x·ª≠ l√Ω..."):
                    answer = process_ai_query(df, user_question, api_key)
                    st.success("C√¢u tr·∫£ l·ªùi:")
                    st.write(answer)
            else:
                st.warning("Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß API key v√† c√¢u h·ªèi.")